@model City
@{
    //To get unique ids for  html elements (Because this editorfor is used in multiple places)
    string uniqueCitySelectId = "city-select-list-" + Guid.NewGuid().ToString("N");
    string uniqueCountrySelectId = "country-select-list-" + Guid.NewGuid().ToString("N");

    //Links to actions that return selectlist items
    string actionLinkCities = @Url.Action("CitySelectListData", "Cities", new { id = @Model.Id }) + "?countryId=";
    string actionLinkCountries = @Url.Action("CountrySelectListData", "Countries", new { id = @Model.Country?.Id });
}

<label class="control-label">Country</label>
<select asp-for="@Model.Country.Id" onchange="ReplaceTargetWithAspActionResult(null, '@actionLinkCities' +  $('#@uniqueCountrySelectId').val(), '@uniqueCitySelectId');" id="@uniqueCountrySelectId" class="form-control"></select>

<label class="control-label" asp-for="@Model.Id"></label>
<select id="@uniqueCitySelectId" class="form-control" asp-for="@Model.Id"></select>
<span class="text text-danger" asp-validation-for="@Model.Id"></span>

@* Having src onerror makes the partial view run this javascript when the partial view is updated. There is probably a much more elegant way to do it but I was unable to find it. $(document).ready etc didnt work cuz only the partial updates *@
<img src onerror="ReplaceTargetWithAspActionResult(null, '@actionLinkCountries', '@uniqueCountrySelectId');">
<img src onerror="ReplaceTargetWithAspActionResult(null, '@actionLinkCities' + '@Model.Country?.Id', '@uniqueCitySelectId');">
